# version: '3.8'

# services:
#   postgres:
#     image: postgres:15-alpine
#     container_name: la-postgres
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER:-postgres}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
#       POSTGRES_DB: ${POSTGRES_DB:-learning_platform}
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
#       interval: 5s
#       timeout: 5s
#       retries: 5
#     networks:
#       - la-network

#   redis:
#     image: redis:7-alpine
#     container_name: la-redis
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis_data:/data
#     command: redis-server --requirepass ${REDIS_PASSWORD:-}
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 5s
#       timeout: 5s
#       retries: 5
#     networks:
#       - la-network

#   pgadmin:
#     image: dpage/pgadmin4:latest
#     container_name: pgadmin
#     environment:
#       PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
#       PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
#     ports:
#       - "5050:80"
#     volumes:
#       - pgadmin_data:/var/lib/pgadmin
#     depends_on:
#       postgres:
#         condition: service_healthy
#     networks:
#       - la-network

#   learning-api:
#     build:
#       context: ./app
#       dockerfile: Dockerfile
#     container_name: learning-api
#     environment:
#       - DB_HOST=la-postgres
#       - DB_NAME=${POSTGRES_DB:-learning_platform}
#       - DB_USER=${POSTGRES_USER:-postgres}
#       - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
#       - REDIS_HOST=la-redis
#       - REDIS_PORT=6379
#       - REDIS_PASSWORD=${REDIS_PASSWORD:-}
#       - JWT_SECRET=${JWT_SECRET:-dev-secret-key-change-me-in-production}
#       - MATERIALS_BUCKET=learning-platform-materials
#       - GCS_ENABLED=false
#     volumes:
#       - ./app:/app
#       - ~/.config/gcloud:/root/.config/gcloud:ro
#     ports:
#       - "8080:8080"
#     depends_on:
#       postgres:
#         condition: service_healthy
#       redis:
#         condition: service_started
#     networks:
#       - la-network
#     restart: unless-stopped

# networks:
#   la-network:
#     driver: bridge

# volumes:
#   postgres_data:
#   redis_data:
#   pgadmin_data:

# volumes:
#   postgres_data:
#   redis_data:
#   pgadmin_data:
